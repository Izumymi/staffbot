from bot_instance import bot
from telebot import types
import os
import json
import menu   # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –º–æ–¥—É–ª—å –º–µ–Ω—é
import time   # <<< –¥–æ–±–∞–≤–ª–µ–Ω–æ

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = [6220140788, 528238909]

# –§–∞–π–ª—ã
APPROVED_FILE = "approved.txt"
REQUESTS_FILE = "requests.txt"
USERS_FILE = "users.json"

user_states = {}

def get_approved_users():
    if not os.path.exists(APPROVED_FILE):
        return []
    with open(APPROVED_FILE, "r") as f:
        return [line.strip() for line in f.readlines()]

def approve_user(user_id):
    approved = get_approved_users()
    if str(user_id) not in [line.split(":", 1)[0] for line in approved]:
        users = load_users()
        name = users.get(str(user_id), {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        surname = users.get(str(user_id), {}).get("surname", "")
        full_name = f"{name} {surname}".strip()

        with open(APPROVED_FILE, "a", encoding="utf-8") as f:
            f.write(f"{user_id}:{full_name}\n")
        return True
    return False

def remove_request(user_id):
    if not os.path.exists(REQUESTS_FILE):
        return
    with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()
    with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
        for line in lines:
            if not line.startswith(f"{user_id}:"):
                f.write(line)

def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    users = load_users()
    if str(user_id) in users:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö™ –í–æ–π—Ç–∏", callback_data="enter"))
        bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏:", reply_markup=markup)
        return

    user_states[user_id] = {"step": "ask_name"}
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è:")

@bot.message_handler(commands=['requests'])
def show_requests(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not os.path.exists(REQUESTS_FILE):
        bot.reply_to(message, "‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É.")
        return

    with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()

    if not lines:
        bot.reply_to(message, "‚ùå –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç.")
        return

    for line in lines:
        try:
            user_id, info = line.split(":", 1)
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            )
            bot.send_message(message.chat.id, f"–ó–∞—è–≤–∫–∞ –æ—Ç {info.strip()}", reply_markup=markup)
        except:
            continue

@bot.callback_query_handler(func=lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
def handle_approval_rejection(call):
    admin_id = call.from_user.id
    if admin_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    action, user_id = call.data.split("_", 1)

    if action == "approve":
        approve_user(user_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö™ –í–æ–π—Ç–∏", callback_data="enter"))
        bot.send_message(int(user_id), "üéâ –¢—ã –æ–¥–æ–±—Ä–µ–Ω! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏:", reply_markup=markup)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif action == "reject":
        bot.send_message(int(user_id), "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    remove_request(user_id)

@bot.callback_query_handler(func=lambda c: c.data in ["confirm", "edit", "enter", "start_training"])
def callback_handler(call):
    user_id = call.from_user.id
    users = load_users()

    if call.data == "confirm":
        data = users.get(str(user_id), {})
        name = data.get("name", "")
        surname = data.get("surname", "")
        phone = data.get("phone", "")

        already_exists = False
        if os.path.exists(REQUESTS_FILE):
            with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    if str(user_id) in line:
                        already_exists = True
                        break

        if not already_exists:
            with open(REQUESTS_FILE, "a", encoding="utf-8") as f:
                f.write(f"{user_id}: {name} {surname} | {phone}\n")

        bot.send_message(user_id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û–∂–∏–¥–∞–π –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif call.data == "edit":
        user_states[user_id] = {"step": "ask_name"}
        bot.send_message(user_id, "–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ –∏–º—è:")

    elif call.data == "enter":
        if str(user_id) in get_approved_users():
            menu.show_main_menu(call.message)
        else:
            bot.send_message(user_id, "‚è≥ –¢—ã –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω.")

    elif call.data == "start_training":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üç≥ –ö—É—Ö–Ω—è", callback_data="job_–∫—É—Ö–Ω—è"),
            types.InlineKeyboardButton("ü™ë –ó–∞–ª", callback_data="job_–∑–∞–ª")
        )
        markup.add(
            types.InlineKeyboardButton("üçπ –ë–∞—Ä", callback_data="job_–±–∞—Ä"),
            types.InlineKeyboardButton("üë† Hostess", callback_data="job_hostess")
        )
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏, –≥–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("job_"))
def handle_job_selection(call):
    user_id = str(call.from_user.id)
    if user_id not in get_approved_users():
        bot.answer_callback_query(call.id, "üö´ –¢—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω.")
        return

    job_map = {
        "–∫—É—Ö–Ω—è": "chef.pdf",
        "–±–∞—Ä": "barman.pdf",
        "–∑–∞–ª": "waiter.pdf",
        "hostess": "hostess.pdf"
    }

    job_code = call.data.replace("job_", "")
    file_name = job_map.get(job_code)

    if not file_name:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.")
        return

    file_path = os.path.join("files", file_name)
    if not os.path.exists(file_path):
        bot.send_message(call.message.chat.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.send_message(call.message.chat.id, f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {file_name}")
    with open(file_path, "rb") as f:
        bot.send_document(call.message.chat.id, f, caption=file_name)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# =======================
# –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
# =======================
@bot.callback_query_handler(func=lambda c: c.data == "faq_main")
def show_faq_sections(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üçΩ –í—ã—Ö–æ–¥ –±–ª—é–¥", callback_data="faq_dishes"))
    markup.add(types.InlineKeyboardButton("üçï –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è–º (–µ–¥–∞)", callback_data="faq_food"))
    markup.add(types.InlineKeyboardButton("üç∑ –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è–º (–Ω–∞–ø–∏—Ç–∫–∏)", callback_data="faq_drinks"))
    markup.add(types.InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", callback_data="faq_breakfast"))
    markup.add(types.InlineKeyboardButton("üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ –±–æ–Ω—É—Å—ã", callback_data="faq_salary"))
    markup.add(types.InlineKeyboardButton("üö¨ –ö—É—Ä–µ–Ω–∏–µ –∏ —Å–∏–≥–∞—Ä–µ—Ç—ã", callback_data="faq_smoke"))

    bot.send_message(
        call.message.chat.id,
        "üß† *–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ÅâÔ∏è*\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith("faq_"))
def faq_callback(call):
    answers = {
        "faq_dishes": (
            "üçΩ *–í—ã—Ö–æ–¥ –±–ª—é–¥*\n\n"
            "‚Äî –®–∞—à–ª—ã–∫: 250 –≥\n"
            "‚Äî –°–∞–ª–∞—Ç: 250‚Äì280 –≥\n"
            "‚Äî –ó–∞–∫—É—Å–∫–∏: 200‚Äì300 –≥"
        ),
        "faq_food": (
            "üçï *–ß—Ç–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è–º (–µ–¥–∞)*\n\n"
            "‚Äî –ö –ø–∏–≤—É: –∫–∞—Ä–∞—Å–∏, —ç–¥–∞–º–∞–º–µ, –≥—Ä–µ–Ω–∫–∏\n"
            "‚Äî –ö –≤–∏–Ω—É: —Å—ã—Ä–Ω–∞—è, —Ñ—Ä—É–∫—Ç–æ–≤–∞—è, —Å—Ç–µ–π–∫–∏\n"
            "‚Äî –ù–∞ –∫–æ–º–ø–∞–Ω–∏—é: –ø–ª–æ–≤, –º—è—Å–Ω–æ–π —Å–µ—Ç\n"
            "‚Äî –î–µ—Ç—è–º: —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∏, –ø–∏—Ü—Ü–∞, –ø–µ–ª—å–º–µ–Ω–∏"
        ),
        "faq_drinks": (
            "üç∑ *–ß—Ç–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è–º (–Ω–∞–ø–∏—Ç–∫–∏)*\n\n"
            "‚Äî –ö—Ä–µ–ø–∫–∏–π –∞–ª–∫–æ–≥–æ–ª—å: Tenjaku (–≤–∏—Å–∫–∏), Lex (–≤–æ–¥–∫–∞)\n"
            "‚Äî –ö–æ–∫—Ç–µ–π–ª–∏: Whiskey Sour, Aperol Spritz, Negroni\n"
            "‚Äî –í–∏–Ω–æ: San Valentin, Canti (–±–µ–ª–æ–µ –∏ –∫—Ä–∞—Å–Ω–æ–µ)"
        ),
        "faq_breakfast": (
            "üç≥ *–ó–∞–≤—Ç—Ä–∞–∫–∏*\n\n"
            "‚Äî –ë—É–¥–Ω–∏: 07:00‚Äì10:30\n"
            "‚Äî –í—ã—Ö–æ–¥–Ω—ã–µ: 08:00‚Äì11:00 + —à–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω\n"
            "‚Äî –¶–µ–Ω–∞: –≤–∑—Ä–æ—Å–ª—ã–π ‚Äî 8 000 —Ç–≥, –¥–µ—Ç—Å–∫–∏–π ‚Äî 6 000 —Ç–≥"
        ),
        "faq_salary": (
            "üí∏ *–ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ –±–æ–Ω—É—Å—ã*\n\n"
            "‚Äî –ó–∞—Ä–ø–ª–∞—Ç–∞: –¥–æ 10 —á–∏—Å–ª–∞\n"
            "‚Äî –ê–≤–∞–Ω—Å: –¥–æ 15 —á–∏—Å–ª–∞\n"
            "‚Äî % –∏ –±–æ–Ω—É—Å—ã: —Å 20 –ø–æ 25 —á–∏—Å–ª–æ"
        ),
        "faq_smoke": (
            "üö¨ *–°–∏–≥–∞—Ä–µ—Ç—ã –∏ –∫—É—Ä–µ–Ω–∏–µ*\n\n"
            "‚Äî –ú—ã –Ω–µ –ø—Ä–æ–¥–∞—ë–º —Å–∏–≥–∞—Ä–µ—Ç—ã. –ë–ª–∏–∂–∞–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω ‚Äî –ñ–ö Liberty (Market)\n"
            "‚Äî –ù–∞ —Ç–µ—Ä—Ä–∞—Å–µ: —Å–∏–≥–∞—Ä–µ—Ç—ã ‚Äî –Ω–µ–ª—å–∑—è, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∫–∏ ‚Äî –º–æ–∂–Ω–æ\n"
            "‚Äî –ö–∞–ª—å—è–Ω–æ–≤ –Ω–µ—Ç (–∑–∞–ø—Ä–µ—â–µ–Ω—ã –∑–∞–∫–æ–Ω–æ–º –†–ö)"
        ),
    }

    text = answers.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª")
    bot.send_message(call.message.chat.id, text, parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# =======================
# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É
# =======================
feedback_states = {}

@bot.callback_query_handler(func=lambda c: c.data == "feedback_start")
def feedback_start(call):
    user_id = call.from_user.id
    feedback_states[user_id] = True
    bot.send_message(user_id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º –∏–º–µ–Ω–µ–º –∏ ID.")
    bot.answer_callback_query(call.id)

def send_feedback_to_admins(user, text):
    for admin_id in ADMIN_IDS:
        bot.send_message(
            admin_id,
            f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n\n"
            f"–ò–º—è: {user.first_name} {user.last_name or ''}\n"
            f"ID: `{user.id}`\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}",
            parse_mode="Markdown"
        )

# =======================
# –¢–ï–°–¢ (–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
# =======================
quiz_questions = [
    {"text": "–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É?", "options": ["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–ü–ª–æ—Ö–æ"]},
    {"text": "–ö–∞–∫ –≤–∞–º –µ–¥–∞?", "options": ["–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"]},
    {"text": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—Å –¥—Ä—É–∑—å—è–º?", "options": ["–î–∞", "–ù–µ—Ç"]}
]

quiz_state = {}

@bot.message_handler(commands=['test'])
def start_quiz(message):
    user_id = message.from_user.id
    quiz_state[user_id] = {"index": 0, "answers": [], "start_time": time.time()}
    send_quiz_question(user_id)

def send_quiz_question(user_id):
    state = quiz_state[user_id]
    idx = state["index"]

    if idx >= len(quiz_questions):
        duration = int(time.time() - state.get("start_time", time.time()))
        minutes = duration // 60
        seconds = duration % 60

        results = "\n".join(
            f"{quiz_questions[i]['text']} ‚Äî {ans}"
            for i, ans in enumerate(state["answers"])
        )
        users = load_users()
        user_info = users.get(str(user_id), {})
        full_name = (user_info.get("name", "") + " " + user_info.get("surname", "")).strip()
        if not full_name:
            full_name = "–ë–µ–∑ –∏–º–µ–Ω–∏"

        for admin_id in ADMIN_IDS:
            bot.send_message(
                admin_id,
                f"üìù –ù–æ–≤—ã–π —Ç–µ—Å—Ç –æ—Ç {full_name} (ID {user_id}):\n\n"
                f"{results}\n\n"
                f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
            )

        bot.send_message(
            user_id,
            f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n"
            f"‚è± –¢—ã –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç –∑–∞ {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        )

        del quiz_state[user_id]
        return

    q = quiz_questions[idx]
    markup = types.InlineKeyboardMarkup()
    for option in q["options"]:
        markup.add(types.InlineKeyboardButton(option, callback_data=f"quiz_{option}"))
    bot.send_message(user_id, q["text"], reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("quiz_"))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    if user_id not in quiz_state:
        bot.answer_callback_query(call.id, "–¢–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /test")
        return

    answer = call.data.replace("quiz_", "")
    state = quiz_state[user_id]
    state["answers"].append(answer)
    state["index"] += 1

    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    send_quiz_question(user_id)

# =======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô (–ü–û–°–õ–ï–î–ù–ò–ô!)
# =======================
@bot.message_handler(func=lambda msg: True)
def all_messages(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text.startswith("/"):
        return

    state = user_states.get(user_id, {})

    if feedback_states.get(user_id):
        feedback_states.pop(user_id)
        send_feedback_to_admins(message.from_user, text)
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.")
        return

    users = load_users()
    if str(user_id) not in users:
        users[str(user_id)] = {}

    if state.get("step") == "ask_name":
        users[str(user_id)]["name"] = text
        user_states[user_id]["step"] = "ask_surname"
        save_users(users)
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")

    elif state.get("step") == "ask_surname":
        users[str(user_id)]["surname"] = text
        user_states[user_id]["step"] = "ask_phone"
        save_users(users)
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...):")

    elif state.get("step") == "ask_phone":
        users[str(user_id)]["phone"] = text
        save_users(users)
        user_data = users[str(user_id)]
        summary = (f"–ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n\n"
                   f"–ò–º—è: {user_data['name']}\n"
                   f"–§–∞–º–∏–ª–∏—è: {user_data['surname']}\n"
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm"),
                   types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit"))
        bot.send_message(user_id, summary, reply_markup=markup)

    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö™ –í–æ–π—Ç–∏", callback_data="enter"))
        bot.send_message(user_id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏:", reply_markup=markup)

bot.polling()
